{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GitGrifItem.js","components/GifGrid.js","hooks/useFetchGif.js","components/GifExpertComponent.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","trim","length","preventDefault","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GitGrifItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGif","GifExpertComponent","props","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAgB5C,OACI,sBAAMC,SATW,SAACC,GAChBH,EAAWI,OAAOC,OAAS,IAC7BF,EAAEG,iBACFR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKd,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdzB,SAACP,GAClBF,EAAcE,EAAEQ,OAAOF,a,+BCNfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEZC,EAFY,0FAE6EC,UAAUH,GAFvF,sBAGCI,MAAMF,GAHP,cAGZG,EAHY,gBAIGA,EAAKC,OAJR,uBAIXC,EAJW,EAIXA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAVvB,kBAcXM,GAdW,4CAAH,sDCCVO,EAAc,SAAC,GAAkB,IAAjBb,EAAgB,EAAhBA,IAAKU,EAAW,EAAXA,MAC9B,OAEI,sBAAKI,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFDO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECCZ,SAACA,GAAc,IAAD,EAGXd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IALwB,mBAG9BC,EAH8B,KAGvBC,EAHuB,KAwBrC,OAhBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAKGqB,EDtBoBK,CAAY1B,GAA/Ba,EAH2B,EAGhCN,KAAaa,EAHmB,EAGnBA,QAIhB,OAEC,qCACG,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAER,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEElBgB,EAtBY,SAAAC,GAAU,IAAD,EAEI1C,mBAAS,CAAC,cAFd,mBAEzBQ,EAFyB,KAEbT,EAFa,KAMhC,OACI,qCACI,yCACA,uBAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,6BAEIS,EAAWe,KAAI,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAYA,GAAtBA,Y,MCZzD6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.f17df245.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n      if (inputValue.trim().length > 2) {\r\n        e.preventDefault();\r\n        setCategories(categories => [inputValue, ...categories]);\r\n        setInputValue('');\r\n      }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={handleChange} />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n   export const getGifs = async (category) => {\r\n        \r\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=MNx5K70l6HVsq4ENFk9pA6v1BWnfjA6f&q=${encodeURI(category)}&limit=10`;\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id : img.id,\r\n                title:img.title,\r\n                url:img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n    }","import React from 'react'\r\n\r\nexport const GitGrifItem = ({url, title}) => {\r\n    return (\r\n\r\n        <div className='card animate__animated animate__fadeIn'>\r\n          <img src={url} alt={title} />\r\n          <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGif } from '../hooks/useFetchGif';\r\nimport { GitGrifItem } from './GitGrifItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\nconst {data:images, loading} = useFetchGif(category); \r\n\r\n\r\n\r\n    return (\r\n\r\n     <>\r\n        <h4 className='animate__animated animate__fadeIn'>{category}</h4>\r\n\r\n        {loading && <p className='animate__animated animate__flash'>Loading...</p>}\r\n\r\n            <div className='card-grid'>\r\n                 \r\n                {\r\n                    images.map(img =>(\r\n                        <GitGrifItem \r\n                        key={img.id}\r\n                        {...img} />\r\n                    \r\n                    ))\r\n                }\r\n                    \r\n            </div>\r\n     </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\n\r\n\r\n\r\nexport const useFetchGif = (category) => { \r\n\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category])\r\n\r\n\r\n\r\n\r\n    return state; // { data:[], loading: true };\r\n \r\n}\r\n","import React, { useState} from 'react'\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nconst GifExpertComponent = props => {\r\n\r\n    const [categories, setCategories] = useState(['one punch']);\r\n\r\n\r\n    \r\n    return (\r\n        <>\r\n            <h2>Gif app</h2>\r\n            <hr />\r\n\r\n            <AddCategory setCategories ={setCategories}/>\r\n\r\n            <ol>\r\n            {\r\n                categories.map(category => <GifGrid key={category} category = {category} /> )\r\n            }  \r\n            </ol>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertComponent\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertComponent from './components/GifExpertComponent';\nimport './index.css';\n\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <GifExpertComponent />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}